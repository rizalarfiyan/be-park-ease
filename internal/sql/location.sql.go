// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: location.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllLocation = `-- name: CountAllLocation :one
SELECT COUNT(*) FROM location
`

func (q *Queries) CountAllLocation(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllLocation)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLocation = `-- name: CreateLocation :exec
Insert into location (code, name, is_exit , created_by) values ($1, $2, $3, $4)
`

type CreateLocationParams struct {
	Code      string
	Name      string
	IsExit    bool
	CreatedBy int32
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) error {
	_, err := q.db.Exec(ctx, createLocation,
		arg.Code,
		arg.Name,
		arg.IsExit,
		arg.CreatedBy,
	)
	return err
}

const deleteLocation = `-- name: DeleteLocation :exec
UPDATE location SET deleted_by = $1, deleted_at = CURRENT_TIMESTAMP WHERE code = $2
`

type DeleteLocationParams struct {
	DeletedBy pgtype.Int4
	Code      string
}

func (q *Queries) DeleteLocation(ctx context.Context, arg DeleteLocationParams) error {
	_, err := q.db.Exec(ctx, deleteLocation, arg.DeletedBy, arg.Code)
	return err
}

const getAllLocation = `-- name: GetAllLocation :many
SELECT code, name, is_exit, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM location
`

func (q *Queries) GetAllLocation(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, getAllLocation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.IsExit,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationByCode = `-- name: GetLocationByCode :one
SELECT code, name, is_exit, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM location where code = $1 LIMIT 1
`

func (q *Queries) GetLocationByCode(ctx context.Context, code string) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByCode, code)
	var i Location
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.IsExit,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE location SET name = $1, is_exit = $2, updated_by = $3, updated_at = CURRENT_TIMESTAMP WHERE code = $4
`

type UpdateLocationParams struct {
	Name      string
	IsExit    bool
	UpdatedBy pgtype.Int4
	Code      string
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.Exec(ctx, updateLocation,
		arg.Name,
		arg.IsExit,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}
