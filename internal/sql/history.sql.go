// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: history.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllEntryHistory = `-- name: CountAllEntryHistory :one
select COUNT(*) from entry_history eh
LEFT JOIN exit_history exh on eh.id = exh.entry_history_id
LEFT JOIN fine_history fh on eh.id = fh.entry_history_id
`

func (q *Queries) CountAllEntryHistory(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllEntryHistory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllEntryHistory = `-- name: GetAllEntryHistory :many
select eh.id, eh.location_code, eh.vehicle_type_code, eh.vehicle_number, coalesce(fh.fined_at, coalesce(exh.exited_at, eh.created_at)) date,
       CASE WHEN fh.fined_at IS NOT NULL THEN 'fine' WHEN exh.exited_at IS NOT NULL THEN 'exit' ELSE 'entry' END AS type
from entry_history eh
LEFT JOIN exit_history exh on eh.id = exh.entry_history_id
LEFT JOIN fine_history fh on eh.id = fh.entry_history_id
`

type GetAllEntryHistoryRow struct {
	ID              string
	LocationCode    string
	VehicleTypeCode string
	VehicleNumber   string
	Date            pgtype.Timestamp
	Type            string
}

func (q *Queries) GetAllEntryHistory(ctx context.Context) ([]GetAllEntryHistoryRow, error) {
	rows, err := q.db.Query(ctx, getAllEntryHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllEntryHistoryRow{}
	for rows.Next() {
		var i GetAllEntryHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationCode,
			&i.VehicleTypeCode,
			&i.VehicleNumber,
			&i.Date,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
