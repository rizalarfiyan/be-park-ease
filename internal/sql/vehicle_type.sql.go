// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: vehicle_type.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllVehicleType = `-- name: CountAllVehicleType :one
SELECT COUNT(*) FROM vehicle_type
`

func (q *Queries) CountAllVehicleType(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllVehicleType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createVehicleType = `-- name: CreateVehicleType :exec
INSERT INTO vehicle_type (code, name, price, created_by) VALUES ($1, $2, $3, $4)
`

type CreateVehicleTypeParams struct {
	Code      string
	Name      string
	Price     pgtype.Numeric
	CreatedBy int32
}

func (q *Queries) CreateVehicleType(ctx context.Context, arg CreateVehicleTypeParams) error {
	_, err := q.db.Exec(ctx, createVehicleType,
		arg.Code,
		arg.Name,
		arg.Price,
		arg.CreatedBy,
	)
	return err
}

const deleteVehicleType = `-- name: DeleteVehicleType :exec
UPDATE vehicle_type SET deleted_by = $1, deleted_at = CURRENT_TIMESTAMP WHERE code = $2
`

type DeleteVehicleTypeParams struct {
	DeletedBy pgtype.Int4
	Code      string
}

func (q *Queries) DeleteVehicleType(ctx context.Context, arg DeleteVehicleTypeParams) error {
	_, err := q.db.Exec(ctx, deleteVehicleType, arg.DeletedBy, arg.Code)
	return err
}

const getAllVehicleType = `-- name: GetAllVehicleType :many
SELECT code, name, price, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM vehicle_type
`

func (q *Queries) GetAllVehicleType(ctx context.Context) ([]VehicleType, error) {
	rows, err := q.db.Query(ctx, getAllVehicleType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VehicleType{}
	for rows.Next() {
		var i VehicleType
		if err := rows.Scan(
			&i.Code,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVehicleTypeByCode = `-- name: GetVehicleTypeByCode :one
SELECT code, name, price, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM vehicle_type where code = $1 LIMIT 1
`

func (q *Queries) GetVehicleTypeByCode(ctx context.Context, code string) (VehicleType, error) {
	row := q.db.QueryRow(ctx, getVehicleTypeByCode, code)
	var i VehicleType
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateVehicleType = `-- name: UpdateVehicleType :exec
UPDATE vehicle_type SET name = $1, price = $2, updated_by = $3, updated_at = CURRENT_TIMESTAMP WHERE code = $4
`

type UpdateVehicleTypeParams struct {
	Name      string
	Price     pgtype.Numeric
	UpdatedBy pgtype.Int4
	Code      string
}

func (q *Queries) UpdateVehicleType(ctx context.Context, arg UpdateVehicleTypeParams) error {
	_, err := q.db.Exec(ctx, updateVehicleType,
		arg.Name,
		arg.Price,
		arg.UpdatedBy,
		arg.Code,
	)
	return err
}
