// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, name, username, password, role, status, token, expired_at, created_at, updated_at FROM users WHERE token = $1 LIMIT 1
`

func (q *Queries) GetUserByToken(ctx context.Context, token pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.Status,
		&i.Token,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, name, username, password, role, status, token, expired_at, created_at, updated_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.Status,
		&i.Token,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserToken = `-- name: UpdateUserToken :exec
UPDATE users
SET token = $1, expired_at = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $3
`

type UpdateUserTokenParams struct {
	Token     pgtype.Text
	ExpiredAt pgtype.Timestamp
	ID        int32
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserToken, arg.Token, arg.ExpiredAt, arg.ID)
	return err
}
