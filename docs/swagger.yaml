basePath: /
definitions:
  middleware.AuthUserData:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/sql.UserRole'
      status:
        $ref: '#/definitions/sql.UserStatus'
      username:
        type: string
    type: object
  request.AuthLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  response.BaseResponse:
    properties:
      code:
        example: 999
        type: integer
      data: {}
      message:
        example: Message!
        type: string
    type: object
  sql.UserRole:
    enum:
    - admin
    - karyawan
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleKaryawan
  sql.UserStatus:
    enum:
    - active
    - banned
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusBanned
info:
  contact:
    email: rizal.arfiyan.23@gmail.com
    name: Rizal Arfiyan
    url: https://rizalrfiyan.com
  description: This is a API documentation of BE Park Ease
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BE Park Ease API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Base Home
      operationId: get-base-home
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Base Home based on parameter
      tags:
      - home
  /auth/login:
    post:
      consumes:
      - application/json
      description: Auth Login
      operationId: post-auth-login
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Post Auth Login based on parameter
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Auth Me
      operationId: get-auth-me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/middleware.AuthUserData'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get Auth Me based on parameter
      tags:
      - auth
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
