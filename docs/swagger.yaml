basePath: /
definitions:
  middleware.AuthUserData:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/sql.UserRole'
      status:
        $ref: '#/definitions/sql.UserStatus'
      username:
        type: string
    type: object
  request.AuthLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  request.ChangePasswordRequest:
    properties:
      old_password:
        example: Password123@
        type: string
      password:
        example: Password123@
        type: string
      password_confirmation:
        example: Password123@
        type: string
    type: object
  request.CreateOrUpdateSettingRequest:
    properties:
      fine_ticket_calculation:
        type: integer
      next_hour_calculation:
        type: integer
    type: object
  request.CreateUserRequest:
    properties:
      name:
        example: Paijo Royo Royo
        type: string
      password:
        example: password
        type: string
      role:
        allOf:
        - $ref: '#/definitions/sql.UserRole'
        example: karyawan
      status:
        allOf:
        - $ref: '#/definitions/sql.UserStatus'
        example: active
      username:
        example: paijo
        type: string
    type: object
  request.CreateVehicleTypeRequest:
    properties:
      code:
        example: K001
        type: string
      name:
        example: Bicycle
        type: string
      price:
        example: 2000
        type: number
    type: object
  request.UpdateUserRequest:
    properties:
      name:
        example: Paijo Royo Royo
        type: string
      password:
        example: password
        type: string
      role:
        allOf:
        - $ref: '#/definitions/sql.UserRole'
        example: karyawan
      status:
        allOf:
        - $ref: '#/definitions/sql.UserStatus'
        example: active
      username:
        example: paijo
        type: string
    type: object
  request.UpdateVehicleTypeRequest:
    properties:
      name:
        example: Bicycle
        type: string
      price:
        example: 2000
        type: number
    type: object
  response.BaseMetadataPagination:
    properties:
      has_next:
        type: boolean
      page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
    type: object
  response.BaseResponse:
    properties:
      code:
        example: 999
        type: integer
      data: {}
      message:
        example: Message!
        type: string
    type: object
  response.BaseResponsePagination-response_EntryHistory:
    properties:
      content:
        items:
          $ref: '#/definitions/response.EntryHistory'
        type: array
      metadata:
        $ref: '#/definitions/response.BaseMetadataPagination'
    type: object
  response.BaseResponsePagination-response_User:
    properties:
      content:
        items:
          $ref: '#/definitions/response.User'
        type: array
      metadata:
        $ref: '#/definitions/response.BaseMetadataPagination'
    type: object
  response.BaseResponsePagination-response_VehicleType:
    properties:
      content:
        items:
          $ref: '#/definitions/response.VehicleType'
        type: array
      metadata:
        $ref: '#/definitions/response.BaseMetadataPagination'
    type: object
  response.EntryHistory:
    properties:
      date:
        type: string
      id:
        type: string
      location_code:
        type: string
      type:
        type: string
      vehicle_number:
        type: string
      vehicle_type_code:
        type: string
    type: object
  response.SettingResponse:
    properties:
      fine_ticket_calculation:
        type: integer
      fine_ticket_calculation_description:
        type: string
      next_hour_calculation:
        type: integer
      next_hour_calculation_description:
        type: string
    type: object
  response.User:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/sql.UserRole'
      status:
        $ref: '#/definitions/sql.UserStatus'
      username:
        type: string
    type: object
  response.VehicleType:
    properties:
      code:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  sql.UserRole:
    enum:
    - admin
    - karyawan
    type: string
    x-enum-varnames:
    - UserRoleAdmin
    - UserRoleKaryawan
  sql.UserStatus:
    enum:
    - active
    - banned
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusBanned
info:
  contact:
    email: rizal.arfiyan.23@gmail.com
    name: Rizal Arfiyan
    url: https://rizalrfiyan.com
  description: This is a API documentation of BE Park Ease
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BE Park Ease API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Base Home
      operationId: get-base-home
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get Base Home based on parameter
      tags:
      - home
  /auth/login:
    post:
      consumes:
      - application/json
      description: Auth Login
      operationId: post-auth-login
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Post Auth Login based on parameter
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Auth Me
      operationId: get-auth-me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/middleware.AuthUserData'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get Auth Me based on parameter
      tags:
      - auth
  /history:
    get:
      consumes:
      - application/json
      description: All History
      operationId: get-all-history
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Order by
        enum:
        - id
        - location_code
        - vehicle_type_code
        - vehicle_number
        - date
        - type
        in: query
        name: order_by
        type: string
      - description: Order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Type
        enum:
        - entry
        - exit
        - fine
        in: query
        name: type
        type: string
      - description: Vehicle Type
        in: query
        name: vehicle_type
        type: string
      - description: Location
        in: query
        name: location
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BaseResponsePagination-response_EntryHistory'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get All History based on parameter
      tags:
      - history
  /setting:
    get:
      consumes:
      - application/json
      description: Get All Setting
      operationId: get-all-setting
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.SettingResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get All Setting based on parameter
      tags:
      - setting
    post:
      consumes:
      - application/json
      description: Create Or Update Setting
      operationId: post-create-or-update-setting
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrUpdateSettingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Post Create Or Update based on parameter
      tags:
      - setting
  /user:
    get:
      consumes:
      - application/json
      description: All User
      operationId: get-all-user
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Order by
        enum:
        - name
        - username
        - role
        - status
        in: query
        name: order_by
        type: string
      - description: Order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Role
        enum:
        - admin
        - karyawan
        in: query
        name: role
        type: string
      - description: Status
        enum:
        - active
        - banned
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BaseResponsePagination-response_User'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get All User based on parameter
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create User
      operationId: post-create-user
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Post Create User based on parameter
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: User By ID
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.User'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get User By ID based on parameter
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update User
      operationId: put-update-user
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Post Update User based on parameter
      tags:
      - user
  /user/change-password:
    post:
      consumes:
      - application/json
      description: Post Change Password
      operationId: post-change-password-user
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Post Change Password User based on parameter
      tags:
      - user
  /vehicle_type:
    get:
      consumes:
      - application/json
      description: All Vehicle Type
      operationId: get-all-vehicle-type
      parameters:
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Order by
        enum:
        - code
        - name
        - price
        - date
        in: query
        name: order_by
        type: string
      - description: Order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BaseResponsePagination-response_VehicleType'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get All Vehicle Type based on parameter
      tags:
      - vehicle-type
    post:
      consumes:
      - application/json
      description: Create Vehicle Type
      operationId: post-create-vehicle-type
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CreateVehicleTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Post Create Vehicle Type based on parameter
      tags:
      - vehicle-type
  /vehicle_type/{code}:
    delete:
      consumes:
      - application/json
      description: Delete Vehicle Type
      operationId: delete-vehicle-type
      parameters:
      - description: Vehicle Type Code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Put Delete Vehicle Type based on parameter
      tags:
      - vehicle-type
    get:
      consumes:
      - application/json
      description: Vehicle Type By Code
      operationId: get-vehicle-type-by-code
      parameters:
      - description: Vehicle Type Code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.VehicleType'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Get Vehicle Type By Code based on parameter
      tags:
      - vehicle-type
    put:
      consumes:
      - application/json
      description: Update Vehicle Type
      operationId: put-update-vehicle-type
      parameters:
      - description: Vehicle Type Code
        in: path
        name: code
        type: string
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.UpdateVehicleTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      security:
      - AccessToken: []
      summary: Put Update Vehicle Type based on parameter
      tags:
      - vehicle-type
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
